((3) 0 () 4 ((p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\_src\\posts\\2015-05-04-ocdsb-career-cruising-what-are-passwords.md" . windows) (p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\_src\\posts\\2015-05-08-my-cs-246-136-workflow-or-how-to-fork-a-git-repository.md" . windows) (p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\_src\\posts\\2015-03-29-why-seashell-sucks.md" . windows) (p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\_src\\posts\\2015-03-24-how-to-access-seashell-files.md" . windows)) () (h ! (equal) ((p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\_src\\posts\\2015-05-08-my-cs-246-136-workflow-or-how-to-fork-a-git-repository.md" . windows) f post (u . "My CS 246/136 workflow, or how to fork a git repository") (? . 1) 1431114896 (p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\blog/2015/05/08/my-cs-246-136-workflow-or-how-to-fork-a-git-repository/index.html" . windows) "/blog/2015/05/08/my-cs-246-136-workflow-or-how-to-fork-a-git-repository/" (u . "2015-05-08T15:25:06") (? . 0) #f (c (u . "cs136") c (u . "cs246") c (u . "tutorials")) (u . "\n<p>The instructions for CS 246 are quite simple: clone the course repository so that you have your own local copy, and then pull from it periodically while committing to it for your own assignments. This is fine, but then you have to resort to rsync or scp to keep files synchronized between the linux.student.cs servers and your own computer; realistically, not everyone wants to ssh in and use vim. These instructions will show you how to have your own local repository that you can sync with a remote one using only git, which I find quite convenient. I used this for CS 136 and I&rsquo;m using it now for CS 246.</p>") #t (u . "\n<p>The instructions for CS 246 are quite simple: clone the course repository so that you have your own local copy, and then pull from it periodically while committing to it for your own assignments. This is fine, but then you have to resort to rsync or scp to keep files synchronized between the linux.student.cs servers and your own computer; realistically, not everyone wants to ssh in and use vim. These instructions will show you how to have your own local repository that you can sync with a remote one using only git, which I find quite convenient. I used this for CS 136 and I&rsquo;m using it now for CS 246.</p>\n<!-- more-->\n\n<p>The goal here is to have a central repository of sorts, just for synchronization. It replicates GitHub&rsquo;s &ldquo;fork&rdquo; functionality by giving you your own remote repository that you can push to. This is desirable because syncing files becomes a simple git pull/git push (and maybe a merge or two), and the student environment servers have good <a href=\"http://math.uwaterloo.ca/math-faculty-computing-facility/recover-files\">backups</a> and uptime&mdash;they likely won&rsquo;t fail completely, unlike your cheap laptop. Also, if the student environment goes down, it&rsquo;s not your responsibility to fix it (ie. courses will make accommodations for it), unlike your laptop.</p>\n\n<p>First set up a bare clone of the repository.</p>\n\n<pre><code>cd ~/cs246\ngit clone --bare https://git.uwaterloo.ca/cs246/1155.git</code></pre>\n\n<p>Then clone it again for your own working copy of it.</p>\n\n<pre><code>git clone 1155.git</code></pre>\n\n<p>On your own computer, clone using ssh from your own bare repository. Don&rsquo;t forget to clone from the bare repository; note that by convention bare repositories are appended with .git.</p>\n\n<pre><code>git clone ssh://userid@linux.student.cs.uwaterloo.ca/~/cs246/1155.git</code></pre>\n\n<p>Then in both systems, you need to add an &ldquo;upstream&rdquo; URL so that you can fetch and pull from the offical course repository. The name doesn&rsquo;t have to be upstream, but remember to use the correct name in the other commands.</p>\n\n<pre><code>git remote add upstream https://git.uwaterloo.ca/cs246/1155.git</code></pre>\n\n<p>Now to &ldquo;pull from upstream&rdquo; you need to first fetch, and then merge. This is what you do instead of git pull if you want to update from the course repository to get new assignments and handouts. CS 246 should stay on the master branch.</p>\n\n<pre><code>git fetch upstream\ngit merge upstream/master</code></pre>\n\n<p>To synchronize files between your computer and the linux.student.cs servers, use git pull/push. For example, you could be working on assignment and finish part of it in one night. You commit and push. Then the next day you can go to a computer lab, log in, and pull to resume work from where you left off. Of course, this workflow is also compatible with other workflows such as the <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow\">feature branch workflow</a>, but it might be overkill for assignments.</p>")) ((p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\_src\\posts\\2015-05-04-ocdsb-career-cruising-what-are-passwords.md" . windows) f post (u . "OCDSB Career Cruising: What are passwords?") (? . 0) 1430785401 (p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\blog/2015/05/04/ocdsb-career-cruising-what-are-passwords/index.html" . windows) "/blog/2015/05/04/ocdsb-career-cruising-what-are-passwords/" (u . "2015-05-04T19:42:33") (? . 2) (? . 1) (c (u . "security")) (u . "\n<p>From 2010 to 2015 at least, The Ottawa-Carleton District School Board used the eponymous course management system from <a href=\"http://public.careercruising.com/en/\">Career Cruising</a>. It was a web application that let students view grades and register for courses in upcoming terms. There were management features as well that allowed guidance counselors (the high-school equivalent of academic advisors) to upload grades or something. The system worked fairly well, but up until 2014, your password would get reset to your birthday every year. This turned out to be a significant security flaw.</p>") #t (u . "\n<p>From 2010 to 2015 at least, The Ottawa-Carleton District School Board used the eponymous course management system from <a href=\"http://public.careercruising.com/en/\">Career Cruising</a>. It was a web application that let students view grades and register for courses in upcoming terms. There were management features as well that allowed guidance counselors (the high-school equivalent of academic advisors) to upload grades or something. The system worked fairly well, but up until 2014, your password would get reset to your birthday every year. This turned out to be a significant security flaw.</p>\n<!-- more-->\n\n<p>Of course, every user had a password of the same format. And most users didn&rsquo;t bother to change their password after the reset until they had to use the system again, which was much later. Birthdays are not private information. Despite my lack of experience I determined it was feasible to scrape birthdays from Facebook using their API. Additionally, usernames were student IDs, and the school computer system&mdash;Windows XP computers on a domain&mdash;had a handy tool, Active Directory Search, that allowed one to lookup student IDs just by searching someone&rsquo;s name. Presumably this step could be automated as well.</p>\n\n<p>The easiest way to exploit this is with a targeted attack. Once a birthday and student ID pair are obtained for one person, an attacker can register the student for useless courses. I suppose the worst case would be a delayed graduation, if the guidance department doesn&rsquo;t step in to fix it. The attacker could also blackmail a student by threatening to disclose grades. On the other hand, a denial of service attack is also possible if a large number of student ID/birthday pairs are obtained, which would swamp the guidance department. With these possible attacks in mind, the flaw can be seen to be fairly severe.</p>\n\n<p>Mitigation includes changing your password as soon as it gets reset. Although not practical, you could also not give out your birthday.</p>\n\n<p>On February 19, 2014, the vulnerability was eventually reported to a student trustee in the OCDSB, who was also a good friend. Eventually, the OCDSB contacted Career Cruising and the password system was overhauled. When I left, randomly generated passwords were distributed in-person from the guidance department.</p>\n\n<p>The passwords were probably stored in plain text. Oh well.</p>")) ((? . 2) f post (u . "Why Seashell seems to suck") (? . 2) 1431137202 (p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\blog/2015/03/29/why-seashell-seems-to-suck/index.html" . windows) "/blog/2015/03/29/why-seashell-seems-to-suck/" (u . "2015-03-29T01:49:58") (? . 3) (? . 0) (c (u . "cs136")) (u . "\n<p>It&rsquo;s the night before the assignemnt is due, and you have errors out the wazoo. You debug furiously with a frown. All of a sudden, Seashell is down! <strong>FIX IT.</strong></p>\n\n<p>In all seriousness, it&rsquo;s not really Seashell&rsquo;s fault. Here&rsquo;s why.</p>") #t (u . "\n<p>It&rsquo;s the night before the assignemnt is due, and you have errors out the wazoo. You debug furiously with a frown. All of a sudden, Seashell is down! <strong>FIX IT.</strong></p>\n\n<p>In all seriousness, it&rsquo;s not really Seashell&rsquo;s fault. Here&rsquo;s why.</p>\n<!-- more-->\n\n<p>Seashell is a great project, built by some very talented developers at Waterloo and various other contributors. Your ISA might have worked on Seashell this term. See <a href=\"https://github.com/cs136/seashell\">Seashell&rsquo;s github</a>. It also has other contributors, like CS 136 students. All this to say, the core Seashell developers know what they&rsquo;re doing. Pretty sure the lead developer is getting paid for it too.</p>\n\n<p>When Seashell goes down it&rsquo;s almost always because of the CSCF&rsquo;s (Computer Science Computing Facility) servers going down or becoming generally unresponsive. Seashell uses three backend servers, and these backend servers are shared with pretty much everyone in the CS faculty. So you have other people doing work on these servers, running their programs, etc. Marmoset also runs its tests on these servers. Other courses also run their tests on these servers. Sometimes, people (perhaps unintentionally) hog a lot of system resouces. This kills the server. What follows is an explanation of some of the issues we&rsquo;ve had this year.</p>\n\n<p>The most recent incident involved Seashell not running/testing any files. Saving probably wasn&rsquo;t working too. The culprit was CS 341 running tests that ate up 100% memory and 100% CPU. At one point they brought down two servers this way. 100% memory means 128GB of memory; at some other point they brought down the beefier server with 256GB of memory.</p>\n\n<p>This other time, someone ran a <a href=\"http://en.wikipedia.org/wiki/Fork_bomb\">fork bomb</a> on one of the servers, rendering that backend server unresponsive. A fork bomb is basically a program that calls itself over and over, multiplying and using up system resources and process IDs. There are ways to prevent this, but the servers aren&rsquo;t configured to do so.</p>\n\n<p>For some reason, when Marmoset stops testing, the web servers get slow. When this happens Seashell takes dozens of seconds to load, but once you&rsquo;re in it&rsquo;s generally OK. Marmoset issues are not new<a href=\"https://www.reddit.com/r/uwaterloo/comments/3021ga/am_i_the_only_one_who_thinks_cs_136_has_been_a/cpos958\">(1)</a><a href=\"https://www.reddit.com/r/uwaterloo/comments/3021ga/am_i_the_only_one_who_thinks_cs_136_has_been_a/cpol9ca\">(2)</a>, and they&rsquo;re caused by the enormous load from ~800 students submitting the night before.</p>\n\n<p>Don&rsquo;t blame the people who work hard on Seashell. It&rsquo;s a lot better than what came before: RunC in VirtualBox. VirtualBox is mediocre at best, and it&rsquo;s an absolutely horrible experience on low-end computers. Before that, they just told people to code with a terminal<a href=\"https://www.reddit.com/r/uwaterloo/comments/3021ga/am_i_the_only_one_who_thinks_cs_136_has_been_a/cpp5qse\">(3)</a> (it&rsquo;s that hacker thing with all the text and commands), which probably scared away a lot of people. Seashell is nice and it abstracts away all these messy details.</p>\n\n<p>In a later post I&rsquo;ll cover my CS 136 workflow. I didn&rsquo;t actually use Seashell that often, since I wanted to learn and get used to certain things that would be required for later courses and programming industry in general.</p>")) ((p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\_src\\posts\\2015-03-24-how-to-access-seashell-files.md" . windows) f post (u . "How to access Seashell files") (? . 3) 1428001837 (p+ #"D:\\Charlie\\Documents\\GitHub\\gibstick.github.io\\blog/2015/03/24/how-to-access-seashell-files/index.html" . windows) "/blog/2015/03/24/how-to-access-seashell-files/" (u . "2015-03-24T16:08:55") #f (? . 2) (c (u . "cs136") c (u . "tutorials")) (u . "\n<p>We all love Seashell, because the only course-sanctioned alternative would be to use RunC inside VirtualBox. But sometimes, the CSCF servers buckle under our load, and then Seashell becomes slow or inaccessible at times. Or maybe, since you worked hard on all your assignments, you just want to keep a copy of your them. Here&rsquo;s how to get your files from Seashell, even if Seashell is down.</p>") #t (u . "\n<p>We all love Seashell, because the only course-sanctioned alternative would be to use RunC inside VirtualBox. But sometimes, the CSCF servers buckle under our load, and then Seashell becomes slow or inaccessible at times. Or maybe, since you worked hard on all your assignments, you just want to keep a copy of your them. Here&rsquo;s how to get your files from Seashell, even if Seashell is down.</p>\n<!-- more-->\n\n<p>You can also delete the object (.o) files from Seashell this way, because you currently can&rsquo;t do that through Seashell itself. You might need this for A10.</p>\n\n<h1 id=\"windows-users\">Windows Users</h1>\n\n<ol>\n <li>Navigate to This PC / My Computer.</li>\n <li>Click &ldquo;Map Network Drive&rdquo;</li>\n <li>Pick any drive you want, maybe W: for Waterloo, and for Folder, enter <code>\\\\smb-files.student.cs.uwaterloo.ca\\USERID</code> where USERID is your Quest/WatIAM/whatever username.</li>\n <li>Enter <code>\\CS-TEACHING\\USERID</code> as the username. If you&rsquo;ve used Seashell before, enter your standard Waterloo password here. If this doesn&rsquo;t work, <a href=\"https://www.student.cs.uwaterloo.ca/password/\">reset your password</a>.</li>\n <li>Now enter your newly-added network drive. Optional: Show hidden files/folders by going to View &gt; tick &ldquo;Hidden items&rdquo; from the menubar.</li>\n <li>If you didn&rsquo;t want to show hidden files/folders, append <code>.seashell</code> to the path in the location bar and press enter. Otherwise, enter the <code>.seashell</code>folder. It will appear greyed out because it is a hidden folder.</li>\n <li>All your Seashell projects will be in the <code>projects</code> folder. You can copy these files as you would for any other file in Windows. Don&rsquo;t move/delete anything unless you know what you&rsquo;re doing, but copying is safe.</li></ol>\n\n<p><a href=\"/img/pub/windows_network_drive_.png\"><img src=\"/img/pub/windows_network_drive_.png\" alt=\"Screenshot of This PC / My Computer\" style=\"width: 500px;\" /></a> <img src=\"/img/pub/windows_logon.png\" alt=\"\" /> <img src=\"/img/pub/windows_seashell_folder.png\" alt=\"\" /></p>\n\n<h1 id=\"mac-users\">Mac Users</h1>\n\n<p>Note: these instructions work for the Mac Labs too, but you can skip step 6.</p>\n\n<ol>\n <li>Open Finder.</li>\n <li>From the menu, Go -&gt; Connect to Server&hellip; (command-K)</li>\n <li>Enter <code>smb://smb-files.student.cs.uwaterloo.ca/USERID</code> as the Server Address, where USERID is your Quest/WatIAM/whatever username.</li>\n <li>Optional: Click the \"+\" icon to add it to favourites.</li>\n <li>Click Connect.</li>\n <li>Enter your username/password. If this doesn&rsquo;t work, <a href=\"https://www.student.cs.uwaterloo.ca/password/\">reset your password</a>. Note: after this step, it might be necessary to manually go into your user folder. Just scroll through and find it; the folder name is your username.</li>\n <li>Navigate to the <code>.seashell</code> hidden folder: Go &gt; Go to Folder (Shift-Command-G), type <code>.seashell</code>. Go.</li>\n <li>All your Seashell projects will be in the <code>projects</code> folder. You can copy these files as you would for any other file. Don&rsquo;t move/delete anything unless you know what you&rsquo;re doing, but copying is safe.</li></ol>\n\n<div class=\"figure\"><img src=\"/img/pub/Mac_smb_add.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"figure\"><img src=\"/img/pub/Mac_finder_goto_seashell.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h1 id=\"linux-users\">Linux Users</h1>\n\n<p>Seashell files are all stored under <code>~/.seashell/projects/</code> on <code>linux.student.cs.uwaterloo.ca</code>. If you know how to mount SMB shares (I don&rsquo;t), the address is <code>smb://smb-files.student.cs.uwaterloo.ca/USERID</code> where USERID is your username. Or just mount the root and navigate to your directory. Or just scp and whatever.</p>"))))